{"remainingRequest":"C:\\Pradeep\\projects\\sourcecode\\nia\\nia\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Pradeep\\projects\\sourcecode\\nia\\nia\\node_modules\\rxjs-compat\\_esm5\\operator\\startWith.js","dependencies":[{"path":"C:\\Pradeep\\projects\\sourcecode\\nia\\nia\\node_modules\\rxjs-compat\\_esm5\\operator\\startWith.js","mtime":1527701786944},{"path":"C:\\Pradeep\\projects\\sourcecode\\nia\\nia\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1526717973884},{"path":"C:\\Pradeep\\projects\\sourcecode\\nia\\nia\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1526531406000}],"contextDependencies":[],"result":["import { startWith as higherOrder } from 'rxjs/operators';\r\n/* tslint:enable:max-line-length */\r\n/**\r\n * Returns an Observable that emits the items you specify as arguments before it begins to emit\r\n * items emitted by the source Observable.\r\n *\r\n * <img src=\"./img/startWith.png\" width=\"100%\">\r\n *\r\n * @param {...T} values - Items you want the modified Observable to emit first.\r\n * @param {Scheduler} [scheduler] - A {@link IScheduler} to use for scheduling\r\n * the emissions of the `next` notifications.\r\n * @return {Observable} An Observable that emits the items in the specified Iterable and then emits the items\r\n * emitted by the source Observable.\r\n * @method startWith\r\n * @owner Observable\r\n */\r\nexport function startWith() {\r\n    var array = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        array[_i] = arguments[_i];\r\n    }\r\n    return higherOrder.apply(void 0, array)(this);\r\n}\r\n//# sourceMappingURL=startWith.js.map",null]}