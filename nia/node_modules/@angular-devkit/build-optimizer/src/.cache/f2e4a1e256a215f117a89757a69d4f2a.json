{"remainingRequest":"C:\\Pradeep\\projects\\sourcecode\\nia\\nia\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Pradeep\\projects\\sourcecode\\nia\\nia\\node_modules\\rxjs-compat\\_esm5\\operator\\retryWhen.js","dependencies":[{"path":"C:\\Pradeep\\projects\\sourcecode\\nia\\nia\\node_modules\\rxjs-compat\\_esm5\\operator\\retryWhen.js","mtime":1527701786889},{"path":"C:\\Pradeep\\projects\\sourcecode\\nia\\nia\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1526717973884},{"path":"C:\\Pradeep\\projects\\sourcecode\\nia\\nia\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1526531406000}],"contextDependencies":[],"result":["import { retryWhen as higherOrder } from 'rxjs/operators';\r\n/**\r\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\r\n * calls `error`, this method will emit the Throwable that caused the error to the Observable returned from `notifier`.\r\n * If that Observable calls `complete` or `error` then this method will call `complete` or `error` on the child\r\n * subscription. Otherwise this method will resubscribe to the source Observable.\r\n *\r\n * <img src=\"./img/retryWhen.png\" width=\"100%\">\r\n *\r\n * @param {function(errors: Observable): Observable} notifier - Receives an Observable of notifications with which a\r\n * user can `complete` or `error`, aborting the retry.\r\n * @return {Observable} The source Observable modified with retry logic.\r\n * @method retryWhen\r\n * @owner Observable\r\n */\r\nexport function retryWhen(notifier) {\r\n    return higherOrder(notifier)(this);\r\n}\r\n//# sourceMappingURL=retryWhen.js.map",null]}